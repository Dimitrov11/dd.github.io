!(function () {
    "use strict";
    const select = (el, all = !1) => (
            (el = el.trim()),
            all
                ? [...document.querySelectorAll(el)]
                : document.querySelector(el)
        ),
        on = (type, el, listener, all = !1) => {
            let selectEl = select(el, all);
            selectEl &&
                (all
                    ? selectEl.forEach((e) =>
                          e.addEventListener(type, listener)
                      )
                    : selectEl.addEventListener(type, listener));
        },
        onscroll = (el, listener) => {
            el.addEventListener("scroll", listener);
        };
    let navbarlinks = select("#navbar .scrollto", !0);
    const navbarlinksActive = () => {
        let position = window.scrollY + 200;
        navbarlinks.forEach((navbarlink) => {
            if (!navbarlink.hash) return;
            let section = select(navbarlink.hash);
            section &&
                (position >= section.offsetTop &&
                position <= section.offsetTop + section.offsetHeight
                    ? navbarlink.classList.add("active")
                    : navbarlink.classList.remove("active"));
        });
    };
    window.addEventListener("load", navbarlinksActive),
        onscroll(document, navbarlinksActive);
    const scrollto = (el) => {
        let elementPos = select(el).offsetTop;
        window.scrollTo({ top: elementPos, behavior: "smooth" });
    };
    let backtotop = select(".back-to-top");
    if (backtotop) {
        const toggleBacktotop = () => {
            window.scrollY > 100
                ? backtotop.classList.add("active")
                : backtotop.classList.remove("active");
        };
        window.addEventListener("load", toggleBacktotop),
            onscroll(document, toggleBacktotop);
    }
    on("click", ".mobile-nav-toggle", function (e) {
        select("body").classList.toggle("mobile-nav-active"),
            this.classList.toggle("bi-list"),
            this.classList.toggle("bi-x");
    }),
        on(
            "click",
            ".scrollto",
            function (e) {
                if (select(this.hash)) {
                    e.preventDefault();
                    let body = select("body");
                    if (body.classList.contains("mobile-nav-active")) {
                        body.classList.remove("mobile-nav-active");
                        let navbarToggle = select(".mobile-nav-toggle");
                        navbarToggle.classList.toggle("bi-list"),
                            navbarToggle.classList.toggle("bi-x");
                    }
                    scrollto(this.hash);
                }
            },
            !0
        ),
        window.addEventListener("load", () => {
            window.location.hash &&
                select(window.location.hash) &&
                scrollto(window.location.hash);
        });
    const typed = select(".typed");
    if (typed) {
        let typed_strings = typed.getAttribute("data-typed-items");
        (typed_strings = typed_strings.split(",")),
            new Typed(".typed", {
                strings: typed_strings,
                loop: !0,
                typeSpeed: 100,
                backSpeed: 50,
                backDelay: 2e3,
            });
    }
    let skilsContent = select(".skills-content");
    skilsContent &&
        new Waypoint({
            element: skilsContent,
            offset: "80%",
            handler: function (direction) {
                let progress;
                select(".progress .progress-bar", !0).forEach((el) => {
                    el.style.width = el.getAttribute("aria-valuenow") + "%";
                });
            },
        }),
        window.addEventListener("load", () => {
            let portfolioContainer = select(".portfolio-container");
            if (portfolioContainer) {
                let portfolioIsotope = new Isotope(portfolioContainer, {
                        itemSelector: ".portfolio-item",
                    }),
                    portfolioFilters = select("#portfolio-flters li", !0);
                on(
                    "click",
                    "#portfolio-flters li",
                    function (e) {
                        e.preventDefault(),
                            portfolioFilters.forEach(function (el) {
                                el.classList.remove("filter-active");
                            }),
                            this.classList.add("filter-active"),
                            portfolioIsotope.arrange({
                                filter: this.getAttribute("data-filter"),
                            }),
                            portfolioIsotope.on("arrangeComplete", function () {
                                AOS.refresh();
                            });
                    },
                    !0
                );
            }
        });

    const portfolioLightbox = GLightbox({ selector: ".portfolio-lightbox" });
    new Swiper(".portfolio-details-slider", {
        speed: 600,
        loop: !0,
        autoplay: { delay: 5e3, disableOnInteraction: !1 },
        pagination: {
            el: ".swiper-pagination",
            type: "bullets",
            clickable: !0,
        },
    }),
        new Swiper(".testimonials-slider", {
            speed: 600,
            loop: !0,
            autoplay: { delay: 5e3, disableOnInteraction: !1 },
            slidesPerView: "auto",
            pagination: {
                el: ".swiper-pagination",
                type: "bullets",
                clickable: !0,
            },
            breakpoints: {
                320: { slidesPerView: 1, spaceBetween: 20 },
                1200: { slidesPerView: 3, spaceBetween: 20 },
            },
        }),
        window.addEventListener("load", () => {
            AOS.init({
                duration: 1e3,
                easing: "ease-in-out",
                once: !0,
                mirror: !1,
            });
        }),
        new PureCounter();
    const getStoredTheme = () => localStorage.getItem("theme"),
        setStoredTheme = (theme) => localStorage.setItem("theme", theme),
        getPreferredTheme = () => {
            const storedTheme = getStoredTheme();
            return (
                storedTheme ||
                (window.matchMedia("(prefers-color-scheme: dark)").matches
                    ? "dark"
                    : "light")
            );
        },
        setTheme = (theme) => {
            "auto" === theme &&
            window.matchMedia("(prefers-color-scheme: dark)").matches
                ? document.documentElement.setAttribute("data-bs-theme", "dark")
                : document.documentElement.setAttribute("data-bs-theme", theme);
        };
    setTheme(getPreferredTheme());
    const showActiveTheme = (theme, focus = !1) => {
        const themeSwitcher = document.querySelector("#bd-theme");
        if (!themeSwitcher) return;
        const themeSwitcherText = document.querySelector("#bd-theme-text"),
            activeThemeIcon = document.querySelector(".theme-icon-active use"),
            btnToActive = document.querySelector(
                `[data-bs-theme-value="${theme}"]`
            ),
            svgOfActiveBtn = btnToActive
                .querySelector("svg use")
                .getAttribute("href");
        document
            .querySelectorAll("[data-bs-theme-value]")
            .forEach((element) => {
                element.classList.remove("active"),
                    element.setAttribute("aria-pressed", "false");
            }),
            btnToActive.classList.add("active"),
            btnToActive.setAttribute("aria-pressed", "true"),
            activeThemeIcon.setAttribute("href", svgOfActiveBtn);
        const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;
        themeSwitcher.setAttribute("aria-label", themeSwitcherLabel),
            focus && themeSwitcher.focus();
    };
    window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", () => {
            const storedTheme = getStoredTheme();
            "light" !== storedTheme &&
                "dark" !== storedTheme &&
                setTheme(getPreferredTheme());
        }),
        window.addEventListener("DOMContentLoaded", () => {
            showActiveTheme(getPreferredTheme()),
                document
                    .querySelectorAll("[data-bs-theme-value]")
                    .forEach((toggle) => {
                        toggle.addEventListener("click", () => {
                            const theme = toggle.getAttribute(
                                "data-bs-theme-value"
                            );
                            setStoredTheme(theme),
                                setTheme(theme),
                                showActiveTheme(theme, !0);

                            setParticlesMode(theme);
                        });
                    });
        });

    function setParticlesMode(theme) {
        switch (theme) {
            case "dark":
                particlesJS(
                    "home",

                    {
                        particles: {
                            number: {
                                value: 80,
                                density: {
                                    enable: true,
                                    value_area: 800,
                                },
                            },
                            color: {
                                value: "#ffffff",
                            },
                            shape: {
                                type: "polygon",
                                stroke: {
                                    width: 0,
                                    color: "#000000",
                                },
                                polygon: {
                                    nb_sides: 5,
                                },
                                image: {
                                    src: "img/github.svg",
                                    width: 100,
                                    height: 100,
                                },
                            },
                            opacity: {
                                value: 0.5,
                                random: false,
                                anim: {
                                    enable: false,
                                    speed: 1,
                                    opacity_min: 0.1,
                                    sync: false,
                                },
                            },
                            size: {
                                value: 5,
                                random: true,
                                anim: {
                                    enable: false,
                                    speed: 40,
                                    size_min: 0.1,
                                    sync: false,
                                },
                            },
                            line_linked: {
                                enable: true,
                                distance: 130,
                                color: "#ffffff",
                                opacity: 0.4,
                                width: 1,
                            },
                            move: {
                                enable: true,
                                speed: 6,
                                direction: "none",
                                random: false,
                                straight: false,
                                out_mode: "out",
                                attract: {
                                    enable: false,
                                    rotateX: 600,
                                    rotateY: 1200,
                                },
                            },
                        },
                        interactivity: {
                            detect_on: "canvas",
                            events: {
                                onhover: {
                                    enable: true,
                                    mode: "repulse",
                                },
                                onclick: {
                                    enable: true,
                                    mode: "push",
                                },
                                resize: true,
                            },
                            modes: {
                                grab: {
                                    distance: 400,
                                    line_linked: {
                                        opacity: 1,
                                    },
                                },
                                bubble: {
                                    distance: 400,
                                    size: 40,
                                    duration: 2,
                                    opacity: 8,
                                    speed: 3,
                                },
                                repulse: {
                                    distance: 200,
                                },
                                push: {
                                    particles_nb: 4,
                                },
                                remove: {
                                    particles_nb: 2,
                                },
                            },
                        },

                        retina_detect: true,
                        config_demo: {
                            hide_card: false,
                            background_color: "#b61924",
                            background_image: "",
                            background_position: "50% 50%",
                            background_repeat: "no-repeat",
                            background_size: "cover",
                        },
                    }
                );

                break;
            case "light":
            default:
                particlesJS(
                    "home",

                    {
                        particles: {
                            number: {
                                value: 80,
                                density: {
                                    enable: true,
                                    value_area: 800,
                                },
                            },
                            color: {
                                value: "#1f5297",
                            },
                            shape: {
                                type: "polygon",
                                stroke: {
                                    width: 0,
                                    color: "#149ddd",
                                },
                                polygon: {
                                    nb_sides: 5,
                                },
                                image: {
                                    src: "img/github.svg",
                                    width: 100,
                                    height: 100,
                                },
                            },
                            opacity: {
                                value: 0.5,
                                random: false,
                                anim: {
                                    enable: false,
                                    speed: 1,
                                    opacity_min: 0.1,
                                    sync: false,
                                },
                            },
                            size: {
                                value: 5,
                                random: true,
                                anim: {
                                    enable: false,
                                    speed: 40,
                                    size_min: 0.1,
                                    sync: false,
                                },
                            },
                            line_linked: {
                                enable: true,
                                distance: 130,
                                color: "#149ddd",
                                opacity: 0.4,
                                width: 1,
                            },
                            move: {
                                enable: true,
                                speed: 6,
                                direction: "none",
                                random: false,
                                straight: false,
                                out_mode: "out",
                                attract: {
                                    enable: false,
                                    rotateX: 600,
                                    rotateY: 1200,
                                },
                            },
                        },
                        interactivity: {
                            detect_on: "canvas",
                            events: {
                                onhover: {
                                    enable: true,
                                    mode: "repulse",
                                },
                                onclick: {
                                    enable: true,
                                    mode: "push",
                                },
                                resize: true,
                            },
                            modes: {
                                grab: {
                                    distance: 400,
                                    line_linked: {
                                        opacity: 1,
                                    },
                                },
                                bubble: {
                                    distance: 400,
                                    size: 40,
                                    duration: 2,
                                    opacity: 8,
                                    speed: 3,
                                },
                                repulse: {
                                    distance: 200,
                                },
                                push: {
                                    particles_nb: 4,
                                },
                                remove: {
                                    particles_nb: 2,
                                },
                            },
                        },

                        retina_detect: true,
                        config_demo: {
                            hide_card: false,
                            background_color: "#b61924",
                            background_image: "",
                            background_position: "50% 50%",
                            background_repeat: "no-repeat",
                            background_size: "cover",
                        },
                    }
                );
                break;
        }
    }
    setParticlesMode("light");
})();
